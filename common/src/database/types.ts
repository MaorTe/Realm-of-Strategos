/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface _PrismaMigrations {
  applied_steps_count: Generated<number>;
  checksum: string;
  finished_at: Timestamp | null;
  id: string;
  logs: string | null;
  migration_name: string;
  rolled_back_at: Timestamp | null;
  started_at: Generated<Timestamp>;
}

export interface GameSession {
  id?: Generated<string>;
  players: string[];
  status: string;
  createdAt?: Generated<Timestamp>;
}

export interface Match {
  id?: Generated<string>;
  player1_id: string;
  player2_id: string;
  created_at?: Generated<Timestamp>;
}

export interface Matchmaking {
  id?: Generated<string>;
  players: Json;
  createdAt?: Generated<Timestamp>;
}

export interface Player {
  id?: Generated<string>;
  skill: number;
  createdAt?: Generated<Timestamp>;
}

export interface User {
  id?: Generated<string>;
  email: string | null;
  password: string;
  username: string;
  createdAt?: Generated<Timestamp>;
}

export interface DB {
  _prisma_migrations: _PrismaMigrations;
  game_session: GameSession;
  match: Match;
  matchmaking: Matchmaking;
  player: Player;
  user: User;
}
